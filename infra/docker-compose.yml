services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ccb
      POSTGRES_USER: ccb
      POSTGRES_PASSWORD: ccb
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ccb -d ccb"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  api:
    build: ../backend
    env_file: ../backend/.env
    environment:
      # Use host Postgres (restored on the host) via host.docker.internal
      DATABASE_URL: "postgresql+psycopg2://ccb:ccb@host.docker.internal:5433/ccb"
      ADMIN_EMAIL: admin@example.com
      ADMIN_PASSWORD: changeme
      DB_HOST: host.docker.internal
      DB_PORT: 5433
      DB_USER: ccb
      DB_PASSWORD: ccb
      DB_NAME: ccb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
    restart: unless-stopped

  web:
    build:
      context: ../frontend/app
      args:
        # Browser clients need a public/host URL (api:8000 resolves only inside docker network).
        # Set to the server's public IP so the built JS calls the reachable API endpoint.
        VITE_API_BASE_URL: http://162.220.11.4:8000
    ports:
      - "8080:80"
    environment:
      VITE_API_BASE_URL: http://162.220.11.4:8000
    # Serve static build via nginx. Do NOT mount source to avoid overriding built files.
    restart: unless-stopped

  api-test:
    build: ../backend
    env_file: ../backend/.env
    environment:
      DATABASE_URL: "postgresql+psycopg2://ccb:ccb@host.docker.internal:5433/ccb"
      ADMIN_EMAIL: admin@example.com
      ADMIN_PASSWORD: changeme
      DB_HOST: host.docker.internal
      DB_PORT: 5433
      DB_USER: ccb
      DB_PASSWORD: ccb
      DB_NAME: ccb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      db:
        condition: service_healthy
    working_dir: /app
    command: sh -lc "pytest -q"
    volumes:
      - ../backend:/app

volumes:
  dbdata:
  web_node_modules:
